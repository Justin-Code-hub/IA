package environment

import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging

import java.util.UUID

import dataStructure.PriorityQueuePair
import java.util.PriorityQueue
import math.Point2i
import dataStructure.Direction
import java.util.Random
import io.sarl.core.DefaultContextInteractions

import events.*

/** 
 * @author Justin
 * 
 */
agent ZombieAgent {
	uses Logging, DefaultContextInteractions
	
	var id : UUID
	var currentPosition : Point2i
	var wantedPosition : Point2i
	var name = "Zombie"
	
	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("A zombie appears.")
		this.id = occurrence.parameters.get(0) as UUID
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}
	
	on Perception {
		if (occurrence.id == this.id) {
			info("A zombie is seeing")
			
			var queueHumans : PriorityQueue<PriorityQueuePair> = new PriorityQueue
			this.currentPosition = occurrence.position
			// There must be an easier way to sort humans by distance
			for (body : occurrence.bodies) {
				if (body instanceof Human) {
					var position = new Point2i(body.getPosition)
					// Create a priority queue of humans based on distance
					queueHumans.add(new PriorityQueuePair(position.distance(this.currentPosition) as int, position)
					)
				}
			}
		//info(queueHumans.poll().getValue())
		randomMove
		emit(new Action(this.wantedPosition, this.id, this.name))
		}
	}
	
	def randomMove() {
		this.wantedPosition = new Point2i(this.currentPosition)
		var directions = newArrayList(Direction.UP, Direction.DOWN, Direction.LEFT, Direction.RIGHT) 
		
		if (this.currentPosition.getX == 29 ){
			directions.remove(3)
		}
		else if (this.currentPosition.getX == 0){
			directions.remove(2)
		}

		if (this.currentPosition.getY == 29) {
			directions.remove(directions.indexOf(Direction.DOWN))
		} else if (this.currentPosition.getY == 0) {
			directions.remove(directions.indexOf(Direction.UP))
		}
		
		var random = new Random
		var direction = directions.get(random.nextInt(directions.size))
		
		if (direction == Direction.UP){
			this.wantedPosition.addY(-1)
		}
		else if (direction == Direction.DOWN) {
			this.wantedPosition.addY(1)
		}
		else if (direction == Direction.RIGHT) {
			this.wantedPosition.addX(1)
		}
		else if (direction == Direction.LEFT) {
			this.wantedPosition.addX(-1)
		}
	}
}

agent HumanAgent {
	uses Logging, DefaultContextInteractions

	var id : UUID
	var name = "Human"
	var currentPosition : Point2i
	var wantedPosition : Point2i
	
	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("A human appears.")
		this.id = occurrence.parameters.get(0) as UUID
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}
	
	on Perception {
		if (occurrence.id == this.id) {
			info("A human is seeing")
			this.currentPosition = occurrence.position
			randomMove
			emit(new Action(this.wantedPosition, this.id, this.name))
		}	
	}
	
	def wanderMove(){
		//TODO
	}

	def randomMove() {
		this.wantedPosition = new Point2i(this.currentPosition)
		var directions = newArrayList(Direction.UP, Direction.DOWN, Direction.LEFT, Direction.RIGHT)

		if (this.currentPosition.getX == 29) {
			directions.remove(3)
		} else if (this.currentPosition.getX == 0) {
			directions.remove(2)
		}

		if (this.currentPosition.getY == 29) {
			directions.remove(directions.indexOf(Direction.DOWN))
		} else if (this.currentPosition.getY == 0) {
			directions.remove(directions.indexOf(Direction.UP))
		}

		var random = new Random
		var direction = directions.get(random.nextInt(directions.size))

		if (direction == Direction.UP) {
			this.wantedPosition.addY(-1)
		} else if (direction == Direction.DOWN) {
			this.wantedPosition.addY(1)
		} else if (direction == Direction.RIGHT) {
			this.wantedPosition.addX(1)
		} else if (direction == Direction.LEFT) {
			this.wantedPosition.addX(-1)
		}
	}
}
