/** 
 * 
 */
package environment

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.ParticipantJoined
import io.sarl.core.ParticipantLeft
import io.sarl.core.SpaceCreated
import io.sarl.core.SpaceDestroyed

import io.sarl.core.Lifecycle
import io.sarl.core.DefaultContextInteractions
import java.util.ArrayList
import java.util.List

import ui.GUI

import events.*
import java.util.HashMap
import math.Point2i
import math.Point2f
import dataStructure.Direction

/** 
 * @author Justin
 * 
 */
agent Environment {
	uses Logging, Bodies, Lifecycle, DefaultContextInteractions
	
	var width : int
	var height : int
	var nbHumans : int
	var nbZombies : int
	var nbWalls : int
	var nbWeapons : int

	var points : List<Point2i>

	var nbSteps : int = 0

	var objects : HashMap<Point2i, SerializableObject> = newHashMap
	var bodies : HashMap<Point2i, Body> = newHashMap

	var moveList : ArrayList<Move> = newArrayList
	var killList : ArrayList<Kill> = newArrayList
	
	var nbWeaponPicked : int
	var gui : GUI

	var listRandomPosition : ArrayList<Point2i> = newArrayList
	var nbKill : int
	
	on Initialize {
		this.gui = occurrence.parameters.get(0)  as GUI
		this.width = occurrence.parameters.get(1) as Integer
		this.height = occurrence.parameters.get(2) as Integer
		this.nbHumans = occurrence.parameters.get(3) as Integer
		this.nbZombies = occurrence.parameters.get(4) as Integer
		this.nbWalls = occurrence.parameters.get(5) as Integer
		this.nbWeapons = occurrence.parameters.get(6) as Integer

		this.nbKill = 0
		
	 	setSkill(new BodiesSkill)
		
		for (i : 0 ..< this.nbHumans as Integer) {
			var body = createHuman(randomPosition)
			this.bodies.put(body.position, body)
			this.objects.put(body.position, body)
			spawn(HumanAgent, body.id)
		}

		for (i : 0 ..< this.nbZombies as Integer) {
			var body = createZombie(randomPosition)
			this.bodies.put(body.position, body)
			this.objects.put(body.position, body)
			spawn(ZombieAgent, body.id)
		}
		for (i : 0 ..< this.nbWeapons as Integer) {
			var object = createWeapon(randomPosition)
			this.objects.put(object.position, object)
		}		
	}

	on Launch {
		// Instead of using Thread.sleep we should use lock
		while(this.nbHumans != 0 && this.nbZombies != 0) {
			agentPerception
			emit(new UpdateGUI(this.objects, this.nbHumans, this.nbZombies, this.points, this.nbSteps, this.nbWeapons))
			Thread.sleep(500)
			while(this.moveList.size != this.nbZombies + this.nbHumans || this.nbKill != 0) {
				// Do nothing
				Thread.sleep(1)
			}
			moveBodies
			while(this.moveList.size != 0 && this.nbWeaponPicked != 0){
				// Do nothing
				Thread.sleep(1)
			}
		}

		emit(new UpdateGUI(this.objects, this.nbHumans, this.nbZombies, this.points, this.nbSteps, this.nbWeapons))
		emit(new End(this.nbHumans, this.nbZombies, this.nbWeapons, this.nbSteps))
	}

	def randomPosition{
		var posX : int
		var posY : int
		do{
			posX = 0 + (Math.random() * ((this.width - 1) + 1)) as Integer
			posY = 0 + (Math.random() * ((this.height - 1) + 1)) as Integer
		} while(listRandomPosition.contains(new Point2i(posX, posY)))

		listRandomPosition.add(new Point2i(posX, posY))
		return new Point2i(posX, posY)
	}
	
	def agentPerception{
		// Let's do some maths
		var agentsPerception : ArrayList<Perception> = newArrayList // List of perception event for each agent

		for (bodyPosition : this.bodies.keySet) {
			var perceptionList : ArrayList<SerializableObject> = newArrayList // List of all objects seen by an agent

			perceptionList.clear()
			for (objectPosition : this.objects.keySet) {
				if (bodyPosition == objectPosition){
					continue
				}
				
				// A triangle is constructed from the body until the border of the map with an angle of 90 degree
				// If a point is inside this triangle(fov) it means that the 3 new triangles have a total area equal to the area of the previous triangle
				var point1 : Point2i
				var point2 : Point2i
				var point3 : Point2i
				var slope : float
				var direction : Point2f

				if(objectPosition.x - bodyPosition.x != 0){
					slope = (objectPosition.y - bodyPosition.y) * 1.0f / (objectPosition.x - bodyPosition.x)
				}
				else {
					slope = 0
				}

				// Math.round is used to avoid strange value such as tan(pi/2) = 0.999
				if (this.bodies.get(bodyPosition).direction == Direction.UP) {
					point1 = new Point2i(Math.round(bodyPosition.x - (Math.tan(Math.PI / 3) * bodyPosition.y)) as Integer, 0)
					point2 = new Point2i(Math.round(bodyPosition.x + (Math.tan(Math.PI / 3) * bodyPosition.y)) as Integer, 0)
					point3 = new Point2i(bodyPosition.x, 0)
					if (slope != 0) {
						direction = new Point2f(-1 / slope, -1)
					}
					else{
						direction = new Point2f(0, -1)
					}
				}
				else if (this.bodies.get(bodyPosition).direction == Direction.DOWN) {
					point1 = new Point2i(Math.round(bodyPosition.x - (Math.tan(Math.PI / 3) * (29 - bodyPosition.y))) as Integer, 29)
					point2 = new Point2i(Math.round(bodyPosition.x + (Math.tan(Math.PI / 3) * (29 - bodyPosition.y))) as Integer, 29)
					point3 = new Point2i(bodyPosition.x, 29)
					if (slope != 0) {
						direction = new Point2f(1 / slope, 1)	
					}
					else{
						direction = new Point2f(0, 1)
					}
				}
				else if (this.bodies.get(bodyPosition).direction == Direction.LEFT) {
					point1 = new Point2i(0, Math.round(bodyPosition.y - (Math.tan(Math.PI / 3) * bodyPosition.x)) as Integer)
					point2 = new Point2i(0, Math.round(bodyPosition.y + (Math.tan(Math.PI / 3) * bodyPosition.x)) as Integer)
					point3 = new Point2i(0, bodyPosition.y)
					direction = new Point2f(-1, -slope)
				}
				else if (this.bodies.get(bodyPosition).direction == Direction.RIGHT) {
					point1 = new Point2i(29, Math.round(bodyPosition.y - (Math.tan(Math.PI / 3) * (29 - bodyPosition.x))) as Integer)
					point2 = new Point2i(29, Math.round(bodyPosition.y + (Math.tan(Math.PI / 3) * (29 - bodyPosition.x))) as Integer)
					point3 = new Point2i(29, bodyPosition.y)
					direction = new Point2f(1, slope)
				}
				else{
				}
				

				//Gui points
				if(objects.get(bodyPosition) instanceof Zombie) {
					this.points = #[point1, point2]
				}
				
				var v1 = new Point2i(objectPosition - point1)
				var v2 = new Point2i(objectPosition - point2)
				var v3 = new Point2i(objectPosition - bodyPosition)

				if(bodyPosition.distance(point3) * point3.distance(point2) != 0 && (bodyPosition.distance(point3) * point3.distance(point2)) == (v1.multiply(v2) * 0.5 + v1.multiply(v3) * 0.5 + v2.multiply(v3) * 0.5)) {
				
					var positionToReach = new Point2f(bodyPosition)
					positionToReach.add(direction)
					var isObjectVisible = true

					while (!positionToReach.equals(objectPosition)) {
						if (objects.containsKey(positionToReach.toInt) && objects.get(positionToReach.toInt).obstructView){
							isObjectVisible = false
							break;
						}
						positionToReach.add(direction)
					}	

					if (isObjectVisible == true) {
						perceptionList.add(objects.get(objectPosition))
					}
				}
			}
			
			for (l : perceptionList) {
			}
			agentsPerception.add(new Perception(this.bodies.get(bodyPosition).id, perceptionList, bodyPosition))
		}

		for (perception : agentsPerception) {
			emit(perception)
		}

	}
	
	on Move {
		addMove(occurrence)
		if(occurrence.isKillEmited) {
			incrementKill
		}
	}

	def synchronized addMove(move : Move){
		this.moveList.add(move)
	}
	
	def moveBodies{
		var movesToDelete : ArrayList<Move> = newArrayList
		var alreadyKilled : ArrayList<Point2i> = newArrayList
		
		for (kill : this.killList) {
			if(alreadyKilled.contains(kill.position)) {
				continue
			}

			if(this.bodies.get(kill.position) instanceof Human) {
				this.nbHumans -= 1
			}
			else if(this.bodies.get(kill.position) instanceof Zombie) {
				this.nbZombies -= 1
			}
			emit(new KillId(this.bodies.get(kill.position).id))
			for(move : this.moveList) {
				if (move.id == this.bodies.get(kill.position).id) {
					movesToDelete.add(move)
				}
			}

			this.objects.remove(kill.position)
			this.bodies.remove(kill.position)
			alreadyKilled.add(kill.position)
		}

		this.killList.clear

		for (move : movesToDelete){
			this.moveList.remove(move)
		}

		resolveConflict


		var objectsTmp : HashMap<Point2i, SerializableObject> = newHashMap
		var bodiesTmp : HashMap<Point2i, Body> = newHashMap

		for(objectPosition : this.objects.keySet) {
			if(this.objects.get(objectPosition) instanceof Body == false) {
				objectsTmp.put(objectPosition, this.objects.get(objectPosition))
			}
		}


		for(move : this.moveList){
			if (move.name.equals("Human")) {
				objectsTmp.put(move.wantedPosition, createHuman(move.wantedPosition, move.id, move.direction))
				bodiesTmp.put(move.wantedPosition, createHuman(move.wantedPosition, move.id, move.direction))
				if (objects.get(move.wantedPosition) instanceof Weapon) {
					emit(new PickWeapon(move.id))
					this.nbWeaponPicked ++
					this.nbWeapons --
				}
			}
			else if (move.name.equals("Zombie")) {
				objectsTmp.put(move.wantedPosition, createZombie(move.wantedPosition, move.id, move.direction))
				bodiesTmp.put(move.wantedPosition, createZombie(move.wantedPosition, move.id, move.direction))
			}	
		}

		this.objects = objectsTmp
		this.bodies = bodiesTmp
		this.nbSteps += 1

		this.moveList.clear
		movesToDelete.clear
	}

	def resolveConflict {

		var conflict : boolean
		var movesToDelete : ArrayList<Move> = newArrayList
		var modifiedMoves : ArrayList<Move> = newArrayList


		do{
			conflict = false
			for(m1 : this.moveList) {
				for (m2 : this.moveList) {
					if (m1.wantedPosition == m2.wantedPosition && m1.id != m2.id) {
						conflict = true
						if (m1.name.equals("Human") && m2.name.equals("Human")){
							if(movesToDelete.contains(m1) == false){
								movesToDelete.add(m1)
								modifiedMoves.add(new Move(m1.currentPosition, m1.currentPosition, m1.id, m1.name, m1.direction, false))
							}
							if(movesToDelete.contains(m2) == false){
								movesToDelete.add(m2)
								modifiedMoves.add(new Move(m2.currentPosition, m2.currentPosition, m2.id, m2.name, m2.direction, false))
							}
						}
						else if(m1.name.equals("Zombie") && m2.name.equals("Zombie")){
							if(movesToDelete.contains(m1) == false){
								movesToDelete.add(m1)
								modifiedMoves.add(new Move(m1.currentPosition, m1.currentPosition, m1.id, m1.name, m1.direction, false))
							}
							if(movesToDelete.contains(m2) == false){
								movesToDelete.add(m2)
								modifiedMoves.add(new Move(m2.currentPosition, m2.currentPosition, m2.id, m2.name, m2.direction, false))
							}
						}
						else if(m1.name.equals("Zombie") && m2.name.equals("Human")){
							if(movesToDelete.contains(m1) == false){
								movesToDelete.add(m1)
								modifiedMoves.add(new Move(m1.currentPosition, m1.currentPosition, m1.id, m1.name, m1.direction, false))
							}
						}
					}
					if(m1.wantedPosition == m2.currentPosition && m2.wantedPosition == m1.currentPosition) {
						if(movesToDelete.contains(m1) == false){
							movesToDelete.add(m1)
							modifiedMoves.add(new Move(m1.currentPosition, m1.currentPosition, m1.id, m1.name, m1.direction, false))
						}
						if(movesToDelete.contains(m2) == false){
							movesToDelete.add(m2)
							modifiedMoves.add(new Move(m2.currentPosition, m2.currentPosition, m2.id, m2.name, m2.direction, false))
						}
					}
				}
			}

			for(move : movesToDelete) {
				if (this.moveList.contains(move)) {
					this.moveList.remove(move)
				}
			}

			this.moveList.addAll(0, modifiedMoves)
		}while (conflict == true)
	}

	on Kill {
		addKill(occurrence)
		decrementKill
	}

	def synchronized addKill(kill : Kill) {
		this.killList.add(kill)
	}
	def synchronized incrementKill {
		this.nbKill ++
	}

	def synchronized decrementKill {
		this.nbKill --
	}	

	on WeaponPicked {
		this.nbWeaponPicked --
	}
	
	on KillEnvironment {
		for(body : this.bodies.keySet){
			emit(new KillId(this.bodies.get(body).id))
		}
		killMe
	}

}
