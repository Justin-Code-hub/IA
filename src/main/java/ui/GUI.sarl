/** 
 * 
 */
package ui

/** 
 * @author Justin
 * 
 */

import java.util.concurrent.Executors
import java.util.concurrent.atomic.AtomicBoolean

import javafx.application.Platform
import javafx.application.Application
import javafx.stage.Stage
import javafx.scene.Scene;
import javafx.scene.Group
import javafx.scene.paint.Color
import javafx.scene.shape.Circle
import javafx.scene.shape.Rectangle
import javafx.scene.shape.Line
import javafx.scene.text.Text
import javafx.scene.text.Font
import javafx.scene.control.Button
import javafx.^event.EventHandler
import javafx.^event.ActionEvent

import environment.Human
import environment.Zombie
import environment.Body
import math.Point2i
import environment.SerializableObject
import environment.Weapon

import java.util.List
import java.util.HashMap
import java.util.ArrayList


class GUI extends Application {

	var public static BODY_SIZE = 32;
	
	static var gui : GUI
	var primaryStage : Stage
	val launched = new AtomicBoolean(false)
	var initialized = false
	var group = new Group()
	var simulationLaunched = false
	
	var humans = 1
	var zombies = 1
	var weapons = 0
	
	static def getGUI : GUI {
		if(gui == null){
			var executorService = Executors.newSingleThreadExecutor
			executorService.submit[Application::launch()]
			
			while (gui === null) {
				Thread.yield
			}
		}
		return gui
	}

	def launchGUI {
		if (!launched.getAndSet(true)) {
			Platform.runLater[initGUI()]
		}
	}

	override start(primaryStage : Stage) {
		gui = this
		this.primaryStage = primaryStage
	}
	
	private def initGUI{
		var scene = new Scene(this.group, 1120, 960, Color.LIGHTGRAY)
		this.primaryStage.title = "Human vs Zombie"
		this.primaryStage.scene = scene
		this.primaryStage.show
		
		informations(1, 1, 0, 0)
		buttons
		this.initialized = true
		
	}
	
	def setTitle(title : String){
		this.primaryStage.title = title
	}
	
	def informations(nbHumans : int, nbZombies : int, nbSteps : int, nbWeapons : int) {
		var rectangle = new Rectangle(160, 960, Color.DARKGRAY)
		rectangle.setX(960)
		rectangle.setY(0)
		this.group.getChildren.add(rectangle)
		
		var textStep = new Text("Number of step : " + nbSteps)
		textStep.setFont(new Font(15))
		textStep.setFill(Color.BLACK)
		textStep.setX(960 + 80 - textStep.getBoundsInLocal.getWidth / 2)
		textStep.setY(20)
		this.group.getChildren.add(textStep)

		var textHumans = new Text("Number of humans : " + nbHumans)
		textHumans.setFont(new Font(15))
		textHumans.setFill(Color.BLACK)
		textHumans.setX(960 + 80 - textHumans.getBoundsInLocal.getWidth / 2)
		textHumans.setY(80)
		this.group.getChildren.add(textHumans)
		
		var textZombies = new Text("Number of zombies : " + nbZombies)
		textZombies.setFont(new Font(15))
		textZombies.setFill(Color.BLACK)
		textZombies.setX(960 + 80 - textZombies.getBoundsInLocal.getWidth / 2)
		textZombies.setY(140)
		this.group.getChildren.add(textZombies)

		var textWeapons = new Text("Number of weapons: " + nbWeapons)
		textWeapons.setFont(new Font(15))
		textWeapons.setFill(Color.BLACK)
		textWeapons.setX(960 + 80 - textWeapons.getBoundsInLocal.getWidth / 2)
		textWeapons.setY(200)
		this.group.getChildren.add(textWeapons)
		
	}
	
	def buttons {
		var buttonLaunch = new Button("Launch")
		buttonLaunch.setMinWidth(80)
		buttonLaunch.setLayoutX(960 + 80 - 80/ 2)
		buttonLaunch.setLayoutY(260)
		this.group.getChildren.add(buttonLaunch)
		
		buttonLaunch.setOnAction[e : ActionEvent |
			this.simulationLaunched = true
		]

		var buttonIncHuman = new Button("+")
		buttonIncHuman.setMinWidth(20)
		buttonIncHuman.setLayoutX(960 + 80)
		buttonIncHuman.setLayoutY(80 + 5)
		this.group.getChildren.add(buttonIncHuman)

		buttonIncHuman.setOnAction [ e : ActionEvent |
			this.humans ++
			informations(this.humans, this.zombies, 0, this.weapons)
			buttons
		]

		var buttonDecHuman = new Button("-")
		buttonDecHuman.setMinWidth(20)
		buttonDecHuman.setLayoutX(960 + 80 - 20)
		buttonDecHuman.setLayoutY(80 + 5)
		this.group.getChildren.add(buttonDecHuman)

		buttonDecHuman.setOnAction [ e : ActionEvent |
			if(this.humans > 1 ) {
				this.humans--
				informations(this.humans, this.zombies, 0, this.weapons)
				buttons
			}
		]
		
		var buttonIncZombie = new Button("+")
		buttonIncZombie.setMinWidth(20)
		buttonIncZombie.setLayoutX(960 + 80)
		buttonIncZombie.setLayoutY(140 + 5)
		this.group.getChildren.add(buttonIncZombie)

		buttonIncZombie.setOnAction [ e : ActionEvent |
			this.zombies++
			informations(this.humans, this.zombies, 0, this.weapons)
			buttons
		]
		
		var buttonDecZombie = new Button("-")
		buttonDecZombie.setMinWidth(20)
		buttonDecZombie.setLayoutX(960 + 80 - 20)
		buttonDecZombie.setLayoutY(140 + 5)
		this.group.getChildren.add(buttonDecZombie)

		buttonDecZombie.setOnAction [ e : ActionEvent |
			if(this.zombies > 1) {
				this.zombies--
				informations(this.humans, this.zombies, 0, this.weapons)
				buttons
			}
		]
		
		var buttonIncWeapon = new Button("+")
		buttonIncWeapon.setMinWidth(20)
		buttonIncWeapon.setLayoutX(960 + 80)
		buttonIncWeapon.setLayoutY(200 + 5)
		this.group.getChildren.add(buttonIncWeapon)

		buttonIncWeapon.setOnAction [ e : ActionEvent |
			this.weapons++
			informations(this.humans, this.zombies, 0, this.weapons)
			buttons
		]
		
		var buttonDecWeapon = new Button("-")
		buttonDecWeapon.setMinWidth(20)
		buttonDecWeapon.setLayoutX(960 + 80 - 20)
		buttonDecWeapon.setLayoutY(200 + 5)
		this.group.getChildren.add(buttonDecWeapon)

		buttonDecWeapon.setOnAction [ e : ActionEvent |
			if(this.weapons > 0) {
				this.weapons--
				informations(this.humans, this.zombies, 0, this.weapons)
				buttons
			}
		]

	}
	
	def setScene(objects : HashMap<Point2i, SerializableObject>, nbHumans : int, nbZombies : int, points : List<Point2i>, nbSteps : int, nbWeapons : int){
		var bodies : ArrayList<Body> = newArrayList
		this.group.getChildren.clear

		informations(nbHumans, nbZombies, nbSteps, nbWeapons)
		if (this.simulationLaunched == false) {
			buttons			
		}

		
		for (objectPosition : objects.keySet){
			if(objects.get(objectPosition) instanceof Body) {
				bodies.add(objects.get(objectPosition) as Body)
			}
			var circle : Circle
			
			if (objects.get(objectPosition) instanceof Human){
				circle = new Circle(BODY_SIZE * (objectPosition.x + 0.5), BODY_SIZE * (objectPosition.y + 0.5),
					BODY_SIZE / 2, Color.RED)
			}
			else if (objects.get(objectPosition) instanceof Zombie) {
				circle = new Circle(BODY_SIZE * (objectPosition.x + 0.5), BODY_SIZE * (objectPosition.y + 0.5),
					BODY_SIZE / 2, Color.GREEN)
			}
			else if (objects.get(objectPosition) instanceof Weapon) {
				circle = new Circle(BODY_SIZE * (objectPosition.x + 0.5), BODY_SIZE * (objectPosition.y + 0.5),
					BODY_SIZE / 2, Color.YELLOW)
			}
			this.group.getChildren.add(circle)
		}
	
		for (b : bodies) {
			var line : Line
			line = new Line(BODY_SIZE * (b.position.x + 0.5), BODY_SIZE * (b.position.y + 0.5),
				BODY_SIZE * (b.position.x + 0.5) + b.direction.x * BODY_SIZE,
				BODY_SIZE * (b.position.y + 0.5) + b.direction.y * BODY_SIZE)
			this.group.getChildren.add(line)
		}
	}
	
	def getInitialized(){
		return this.initialized
	}
	
	def getSimulationLaunched{
		return this.simulationLaunched
	}

	def getHumans {
		return this.humans
	}

	def getZombies {
		return this.zombies
	}

	def getWeapons {
		return this.weapons
	}
}
