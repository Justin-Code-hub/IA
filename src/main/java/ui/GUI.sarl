/** 
 * 
 */
package ui

/** 
 * @author Justin
 * 
 */
import javafx.application.Application
import javafx.stage.Stage
import javafx.scene.Group
import javafx.scene.Scene;
import java.util.concurrent.Executors
import javafx.application.Platform
import java.util.concurrent.atomic.AtomicBoolean
import javafx.scene.paint.Color
import java.util.ArrayList

import javafx.scene.shape.Circle
import javafx.scene.shape.Rectangle
import javafx.scene.shape.Line
import javafx.scene.text.Text
import javafx.scene.text.Font
import environment.Human
import environment.Zombie
import environment.Body
import dataStructure.Direction
import java.util.List
import math.Point2i
import environment.SerializableObject
import java.util.HashMap
import environment.Weapon

class GUI extends Application {

	var public static BODY_SIZE = 32;
	
	static var gui : GUI
	var primaryStage : Stage
	val launched = new AtomicBoolean(false)
	var initialized = false
	var group = new Group()
	
	static def getGUI : GUI {
		if(gui == null){
			var executorService = Executors.newSingleThreadExecutor
			executorService.submit[Application::launch()]
			
			while (gui === null) {
				Thread.yield
			}
		}
		return gui
	}

	def launchGUI {
		if (!launched.getAndSet(true)) {
			Platform.runLater[initGUI()]
		}
	}

	override start(primaryStage : Stage) {
		gui = this
		this.primaryStage = primaryStage
	}
	
	private def initGUI{
		var scene = new Scene(this.group, 1120, 960, Color.LIGHTGRAY)
		this.primaryStage.title = "Human vs Zombie"
		this.primaryStage.scene = scene
		this.primaryStage.show
		
		informations(0, 0, 0)
		this.initialized = true
		
	}
	
	def setTitle(title : String){
		this.primaryStage.title = title
	}
	
	def informations(nbHumans : int, nbZombies : int, nbSteps : int) {
		var rectangle = new Rectangle(160, 960, Color.DARKGRAY)
		rectangle.setX(960)
		rectangle.setY(0)
		this.group.getChildren.add(rectangle)
		
		var textStep = new Text("Number of step : " + nbSteps)
		textStep.setFont(new Font(15))
		textStep.setFill(Color.BLACK)
		textStep.setX(960 + 80 - textStep.getBoundsInLocal.getWidth / 2)
		textStep.setY(20)
		this.group.getChildren.add(textStep)

		var textHumans = new Text("Number of humans : " + nbHumans)
		textHumans.setFont(new Font(15))
		textHumans.setFill(Color.BLACK)
		textHumans.setX(960 + 80 - textHumans.getBoundsInLocal.getWidth / 2)
		textHumans.setY(60)
		this.group.getChildren.add(textHumans)

		var textZombies = new Text("Number of zombies : " + nbZombies)
		textZombies.setFont(new Font(15))
		textZombies.setFill(Color.BLACK)
		textZombies.setX(960 + 80 - textZombies.getBoundsInLocal.getWidth / 2)
		textZombies.setY(100)
		this.group.getChildren.add(textZombies)	
		
	}
	
	def setScene(objects : HashMap<Point2i, SerializableObject>, nbHumans : int, nbZombies : int, points : List<Point2i>, nbSteps : int){
		var bodies : ArrayList<Body> = newArrayList
		this.group.getChildren.clear

		informations(nbHumans, nbZombies, nbSteps)
		
		for (objectPosition : objects.keySet){
			if(objects.get(objectPosition) instanceof Body) {
				bodies.add(objects.get(objectPosition) as Body)
			}
			var circle : Circle
			
			if (objects.get(objectPosition) instanceof Human){
				circle = new Circle(BODY_SIZE * (objectPosition.x + 0.5), BODY_SIZE * (objectPosition.y + 0.5),
					BODY_SIZE / 2, Color.RED)
			}
			else if (objects.get(objectPosition) instanceof Zombie) {
				circle = new Circle(BODY_SIZE * (objectPosition.x + 0.5), BODY_SIZE * (objectPosition.y + 0.5),
					BODY_SIZE / 2, Color.GREEN)
				System.out.println("POINTS : " + points)
				try {
					var l1 = new Line(circle.getCenterX, circle.getCenterY, points.get(0).getX * 32, points.get(0).getY * 32)
					var l2 = new Line(circle.getCenterX, circle.getCenterY, points.get(1).getX * 32, points.get(1).getY * 32)
					this.group.getChildren.add(l1)
					this.group.getChildren.add(l2)
				} catch (e : Exception) {
					
				}
			}
			else if (objects.get(objectPosition) instanceof Weapon) {
				circle = new Circle(BODY_SIZE * (objectPosition.x + 0.5), BODY_SIZE * (objectPosition.y + 0.5),
					BODY_SIZE / 2, Color.YELLOW)
			}
			System.out.println("GUI : " + objectPosition + " / Obj : " + objects.get(objectPosition))
			this.group.getChildren.add(circle)
		}
	
		for (b : bodies) {
			var line : Line
			line = new Line(BODY_SIZE * (b.position.x + 0.5), BODY_SIZE * (b.position.y + 0.5),
				BODY_SIZE * (b.position.x + 0.5) + b.direction.x * BODY_SIZE,
				BODY_SIZE * (b.position.y + 0.5) + b.direction.y * BODY_SIZE)
			this.group.getChildren.add(line)
		}
	}
	
	def getInitialized(){
		return this.initialized
	}
}
